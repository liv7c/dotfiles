#!/usr/bin/env bash

# create a new directory and navigate to it
mkd() {
	mkdir -p "$@" && cd "$_" || return
}

# color grep output
grep() {
  command grep --color=auto "$@"
}

# fzf git helpers
# use fzf to find delete git branch
function dfb() {
  local line branch
	line=$(git --no-pager branch -vv | fzf)
	branch=$(echo "$line" | sed -E 's/^[* ]+([^ ]+).*/\1/')
	
  echo "git branch -D $branch"
  read -p "Are you sure you want to delete this branch? [y|n] " -n 1
  echo ""
  
  if [[ $REPLY =~ ^[Yy]$ ]]; then
	  git branch -D "$branch"
  else
	  echo "Branch deletion aborted"
  fi
}

# use fzf to checkout to git branch using fuzzy finder
function sfg() {
	local line branch
	line=$(git --no-pager branch -vv | fzf)
	branch=$(echo "$line" | sed -E 's/^[* ]+([^ ]+).*/\1/')
	git switch "$branch"
}
# use fzf to find a directory
function fd() {
  DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
    && cd "$DIR"
}

# use fzf to rebase your branch onto a specific commit
function gri() {
  local line commit
  line=$(git log --color=always --pretty=oneline --abbrev-commit | fzf --ansi --reverse)

  # exit the function if no commit is selected
  if [[ -z "$line" ]]; then
    return
  fi

  commit=$(echo "$line" | sed -E "s/^([^ ]+).*/\1/")

  git rebase -i "$commit"
}

# to find git commit sha (very useful when using git rebase -i)

# get test coverage report for go applications
go_cover () { 
    t="/tmp/go-cover.$$.tmp"
    go test -coverprofile=$t $@ && go tool cover -html=$t && unlink $t
}
