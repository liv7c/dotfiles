#!/usr/bin/env bash

# create a new directory and navigate to it
mkd() {
	mkdir -p "$@" && cd "$_" || return
}

# color grep output
grep() {
  command grep --color=auto "$@"
}

# to find git commit sha (very useful when using git rebase -i)
fcs() {
  local commits commit
  commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
  echo -n $(echo "$commit" | sed "s/ .*//")
}

# to switch branch quickly with fzf
# source: https://revelry.co/resources/development/terminal-workflow-fzf/
gsb() {
  result=$(git branch -a --color=always | grep -v '/HEAD\s' | sort |
    fzf --height 50% --border --ansi --tac --preview-window right:70% \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
    sed 's/^..//' | cut -d' ' -f1)

  if [[ $result != "" ]]; then
    if [[ $result == remotes/* ]]; then
      git switch --track $(echo $result | sed 's#remotes/##')
    else
      git switch "$result"
    fi
  fi
}

# fzf git helpers
# use fzf to find delete git branch
dfb() {
	local branches branch
	branches=$(git --no-pager branch -vv) &&
  	branch=$(echo "$branches" | fzf +m)
	echo -e git branch -D $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
	read -p "Are you sure you want to delete this branch? (y/n) " -n 1;
	echo "";
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		git branch -D $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
	fi;
}

# use fzf to checkout to git branch using fuzzy finder
function cfb() {
  local branches branch
  branches=$(git --no-pager branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# use fzf to find a directory
function fd() {
  DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
    && cd "$DIR"
}

# to find git commit sha (very useful when using git rebase -i)
fcs() {
  local commits commit
  commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
  echo -n $(echo "$commit" | sed "s/ .*//")
}

# get test coverage report for go applications
go_cover () { 
    t="/tmp/go-cover.$$.tmp"
    go test -coverprofile=$t $@ && go tool cover -html=$t && unlink $t
}
